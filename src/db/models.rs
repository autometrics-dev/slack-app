use serde::Serialize;
use sqlx::{types::time::OffsetDateTime, FromRow};

#[derive(Clone, Debug, Eq, FromRow, PartialEq, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Alert {
    /// ID of the alert.
    pub id: i64,

    /// The alert text.
    pub text: String,

    /// Whether the alert has been resolved.
    pub resolved: bool,

    /// Fingerprint generated by Alertmanager used to lookup alerts.
    pub fingerprint: Option<String>,

    /// Optional ID of a notebook that has been created in response to the
    /// alert.
    pub notebook_id: Option<String>,

    /// Optional file name of the generated chart for this alert.
    pub chart_filename: Option<String>,

    /// Optional channel the Slack message was posted to.
    pub slack_channel: Option<String>,

    /// Optional timestamp of a Slack message that was sent for this alert, as
    /// returned from the Slack API.
    pub slack_ts: Option<String>,

    /// Optional name of the SLO which is failing, as reported by Sloth.
    pub sloth_slo: Option<String>,

    /// Optional name of the service for which an SLO is failing.
    pub sloth_service: Option<String>,

    /// Optional name of the associated objective
    pub objective_name: Option<String>,

    /// Optional severity of the alert.
    pub severity: Option<String>,

    /// Timestamp at which the alert was created.
    pub created_at: OffsetDateTime,

    /// Timestamp at which the alert was last updated.
    pub updated_at: OffsetDateTime,
}

#[derive(Debug)]
pub struct NewAlert {
    /// The alert text.
    pub text: String,

    /// Whether the alert has been resolved.
    pub resolved: bool,

    /// Fingerprint generated by Alertmanager used for identifying alerts.
    pub fingerprint: Option<String>,

    /// Optional ID of a notebook that has been created in response to the
    /// alert.
    pub notebook_id: Option<String>,

    /// Optional file name of the generated chart for this alert.
    pub chart_filename: Option<String>,

    /// Optional channel the Slack message was posted to.
    pub slack_channel: Option<String>,

    /// Optional timestamp of a Slack message that was sent for this alert, as
    /// returned from the Slack API.
    pub slack_ts: Option<String>,

    /// Optional name of the SLO which is failing, as reported by Sloth.
    pub sloth_slo: Option<String>,

    /// Optional name of the service for which an SLO is failing.
    pub sloth_service: Option<String>,

    /// Optional name of the associated objective
    pub objective_name: Option<String>,

    /// Optional severity of the alert.
    pub severity: Option<String>,
}
