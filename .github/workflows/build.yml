# This workflow will be called by other workflows and will create binaries for
# the various architectures and operating systems that we support. It will
# package these binaries in a Docker image.
---
name: Build slack app

on:
  workflow_call:
    inputs:
      commitish:
        description: The commit-ish to build
        required: true
        default: ""
        type: string
      override_latest:
        description: Whether to override the latest tag in the image registry
        required: true
        default: false
        type: boolean
      version:
        description: The version to publish (no "v" prefix, leave empty to publish under the commit hash of commitish)
        required: false
        default: ""
        type: string

    secrets:
      AUTOMETRICS_DOCKERHUB_USERNAME:
        required: true
      AUTOMETRICS_DOCKERHUB_TOKEN:
        required: true

jobs:
  build-artifacts:
    name: Create binary for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            bin: slack-app
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            bin: slack-app
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitish }}
          fetch-depth: 0
          submodules: recursive

      - uses: Swatinem/rust-cache@v2

      - name: Install Cross
        run: |
          cargo install cross --force --git https://github.com/cross-rs/cross
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=${TARGET_DIR}/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Fetch crates
        run: cargo fetch ${{ env.TARGET_FLAGS }}

      - name: Build release binary
        run: cross build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: slack-app-${{ matrix.target }}
          path: "${{ env.TARGET_DIR }}/release/${{ matrix.bin }}"
          if-no-files-found: error
          retention-days: 3

  # Wrap the Linux binaries in a Docker image and push to our internal registry.
  publish-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: ${{ inputs.version != '' }}
    env:
      TAG: ""
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitish }}
          fetch-depth: 0
          submodules: recursive

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # This is needed to conform to Docker's target arch/os naming scheme.
      - name: Prepare files
        run: |
          mkdir -p build/linux/{amd64,arm64}/
          mv artifacts/slack-app-x86_64-unknown-linux-gnu/slack-app build/linux/amd64/slack-app
          mv artifacts/slack-app-aarch64-unknown-linux-gnu/slack-app build/linux/arm64/slack-app
          chmod u+x build/linux/{amd64,arm64}/slack-app

      - name: Export variables
        run: |
          if [ -z "${{ inputs.version }}" ]; then
            short_sha=$(git rev-parse --short "${{ inputs.commitish }}")
            echo "TAG=dev-${short_sha}" >> $GITHUB_ENV
          else
            echo "TAG=v${{ inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.AUTOMETRICS_DOCKERHUB_USERNAME }}
          password: ${{ secrets.AUTOMETRICS_DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub (version)
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile.release
          context: build
          platforms: linux/amd64,linux/arm64
          push: true
          tags: autometrics/slack-app:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to Docker Hub (latest)
        uses: docker/build-push-action@v5
        if: ${{ inputs.override_latest }}
        with:
          file: Dockerfile.release
          context: build
          platforms: linux/amd64,linux/arm64
          push: true
          tags: autometrics/slack-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
